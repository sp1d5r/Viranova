import React, { useState, useEffect } from "react";
import { deleteShort, Short } from "../../types/collections/Shorts";
import FirebaseFirestoreService from "../../services/database/strategies/FirebaseFirestoreService";
import { useNotification } from "../../contexts/NotificationProvider";
import { Input } from "../ui/input";
import { Textarea } from "../ui/textarea";
import { Button } from "../ui/button";
import { Alert, AlertDescription, AlertTitle } from "../ui/alert";
import { AlertCircle } from "lucide-react";
import {Tooltip, TooltipTrigger, TooltipProvider, TooltipContent } from "../ui/tooltip";

export interface ShortSettingsTabProps {
  short: Short;
  shortId: string;
}

export const ShortSettingsTab: React.FC<ShortSettingsTabProps> = ({ short, shortId }) => {
  const [shortIdea, setShortIdea] = useState<string>(short.short_idea);
  const [shortIdeaExplanation, setShortIdeaExplanation] = useState(short.short_idea_explanation);
  const [isChanged, setIsChanged] = useState(false);
  const { showNotification } = useNotification();
  console.log(short);
  useEffect(() => {
    setIsChanged(
      shortIdea !== short.short_idea ||
      shortIdeaExplanation !== short.short_idea_explanation
    );
  }, [shortIdea, shortIdeaExplanation, short.short_idea, short.short_idea_explanation]);

  const reset = () => {
    setShortIdea(short.short_idea);
    setShortIdeaExplanation(short.short_idea_explanation);
  };

  const updateShortDetails = () => {
    if (isChanged) {
      FirebaseFirestoreService.updateDocument(
        'shorts',
        shortId,
        {
          short_idea: shortIdea,
          short_idea_explanation: shortIdeaExplanation,
          short_idea_run_id: ''
        },
        () => { showNotification('Updated', 'Updated Short Information', 'success'); },
        (err) => { showNotification('Update Failed', err.message, 'error'); }
      );
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h4 className="text-sm font-medium mb-2">Original Transcript:</h4>
        <p className="text-sm bg-secondary p-3 rounded-md">{short.transcript}</p>
      </div>

      {!short.short_idea_run_id && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Warning</AlertTitle>
          <AlertDescription>
            This idea was not generated by us. Analytics will only update transcript editor.
          </AlertDescription>
        </Alert>
      )}

      <div>
        <label htmlFor="shortIdea" className="text-sm font-medium block mb-2">
          Short Idea:
        </label>
        <Input
          id="shortIdea"
          value={shortIdea}
          onChange={(e) => setShortIdea(e.target.value)}
        />
      </div>

      <div>
        <label htmlFor="ideaJustification" className="text-sm font-medium block mb-2">
          Idea Justification:
        </label>
        <Textarea
          id="ideaJustification"
          value={shortIdeaExplanation}
          onChange={(e) => setShortIdeaExplanation(e.target.value)}
          rows={4}
        />
      </div>

      <div className="flex justify-between items-center">
        <div>
          <Button variant="outline" onClick={reset} className="mr-2">
            Reset
          </Button>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button onClick={updateShortDetails} disabled={false}>
                  Submit
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>Only press this if you want to update the short idea you're creating.</p>
                <p>If you manually override the short idea, feedback won't propagate to the language model in charge of generating ideas.</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
        <Button variant="destructive" onClick={() => deleteShort(shortId)}>
          Delete Short
        </Button>
      </div>

      <p className="text-sm text-muted-foreground">
        *Note: Updating short information will de-tag the short idea generation pipeline. Analytics from this video will not feed into the idea generation stage.
      </p>
    </div>
  );
};